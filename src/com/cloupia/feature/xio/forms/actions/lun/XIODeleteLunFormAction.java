package com.cloupia.feature.xio.forms.actions.lun;

import org.apache.log4j.Logger;

import com.cloupia.feature.xio.constants.XIOConstants;
import com.cloupia.feature.xio.device.functions.XIOFunctions;
import com.cloupia.feature.xio.forms.lun.XIODeleteLunForm;
import com.cloupia.model.cIM.ConfigTableAction;
import com.cloupia.model.cIM.DynReportContext;
import com.cloupia.model.cIM.ReportContext;
import com.cloupia.model.cIM.ReportContextRegistry;
import com.cloupia.service.cIM.inframgr.forms.wizard.Page;
import com.cloupia.service.cIM.inframgr.forms.wizard.PageIf;
import com.cloupia.service.cIM.inframgr.forms.wizard.WizardSession;
import com.cloupia.service.cIM.inframgr.reportengine.ContextMapRule;
import com.cloupia.service.cIM.inframgr.reports.simplified.CloupiaPageAction;

public class XIODeleteLunFormAction extends CloupiaPageAction {
	private static Logger logger = Logger.getLogger( XIODeleteLunFormAction.class );
	private static final String formId = "xio.lun.action.form.delete";
	private static final String ACTION_ID = "xio.lun.action.form.delete";
	private static final String LABEL = "Delete Lun";
	
	@Override
	public String getActionId() {
		return ACTION_ID;
	}
	public String getFormId()
	{
		return formId;
	}
	@Override
	public String getLabel() {
		return LABEL;
	}
	@Override
	public String getTitle() {
		return LABEL;
	}
	@Override
	public int getActionType() {
		//just assume you need to pass this constant for this method for any UI actions
		return ConfigTableAction.ACTION_TYPE_POPUP_FORM;
	}
	@Override
	public boolean isSelectionRequired() {
		//return true when a row needs to be selected for this action to proceed
		//return false if no row selection is required
		return true;
	}
	@Override
	public boolean isDoubleClickAction() {
		return false;
	}
	@Override
	public boolean isDrilldownAction() {
		return false;
	}
	@Override
	public void definePage( Page page, ReportContext context ) {
		page.bind(formId, XIODeleteLunForm.class);
	}
	@Override
	public void loadDataToPage( Page page, ReportContext context, WizardSession session) throws Exception {
		String id = context.getId();
		XIOFunctions funcs = new XIOFunctions();
		String accName = funcs.getAccountNameFromLunID( id );
		
		logger.info( "#### XIODeleteLunFormAction:loadDataToPage:Lun ID  = " + id );		
		logger.info( "#### XIODeleteLunFormAction:loadDataToPage:Account Name  = " + accName );
		
		XIODeleteLunForm form = new XIODeleteLunForm();

		form.setMessage( "Delete the selected Lun?" );
		session.getSessionAttributes().put(formId, form);
		page.marshallFromSession(formId);		
	}
	@Override
	public int validatePageData(Page page, ReportContext context, WizardSession session) throws Exception {
		// Object obj = page.unmarshallToSession(formId);
		// XIODeleteLunForm form = (XIODeleteLunForm) obj;
		String id = context.getId();
		
		XIOFunctions funcs = new XIOFunctions();
		String accName = funcs.getAccountNameFromLunID( id );
		String response = funcs.deleteLun( id, accName );

		if( response != null ) {
			funcs.getVolumesExternal( accName );
			page.setRefreshInSeconds( 10 );
			page.setPageMessage( "Lun Deleted successfully." );
			logger.info( "#### XIODeleteLunFormAction:validatePageData = " + XIOConstants.XIO_HTTP_STR_CODE_OK );
			return PageIf.STATUS_OK;
		} else {
			page.setPageMessage( "Lun Deletion failed." );
			return PageIf.STATUS_ERROR;
		}
	}
	public ContextMapRule[] getMapRules() {
		//i'm using an autogenerated report context (which I registered in FooModule), as mentioned in documentation
		//the type may vary depending on deployments, so the safest way to retrieve the auto generated type value
		//is to use the getContextByName api!
		DynReportContext dummyContextOneType = ReportContextRegistry.getInstance().getContextByName(XIOConstants.XIO_CONTEXT_ONE_NAME);
		ContextMapRule rule = new ContextMapRule();
		rule.setContextName(dummyContextOneType.getId());
		rule.setContextType(dummyContextOneType.getType());
		
		ContextMapRule[] rules = new ContextMapRule[1];
		rules[0] = rule;
		
		return rules;
	}
}
